// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSWaves
#pragma kernel CSCalcNormals
#pragma kernel CSNormalizeNormals

struct Octave
{
	float2 speed;
	float2 scale;
	float height;
	int alternate;
};

static const float PI = 3.14159265359f;

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<Octave> octaves;
float time;
float boatSpeed;
float dimension;
uint resolution;

#include "Assets/Resources/Scripts/Water Shader/SimplexNoise.compute"

[numthreads(8, 8, 1)]
void CSWaves(uint3 id : SV_DispatchThreadID)
{
	uint octaveCount;
	uint stride;
	octaves.GetDimensions(octaveCount, stride);

	int index = id.x + id.y * 8;
	float x = vertices[index].x;
	float y = 0;
	float z = vertices[index].z;

	for (int o = 0; o < octaveCount; o++)
	{
		if (octaves[o].alternate > 0)
		{
			float perl = snoise(float2((x * octaves[o].scale.x) / dimension, (z * octaves[o].scale.y) / dimension)) * PI * 2;
			y += (cos(perl + length(octaves[o].speed) * time) / 2 + 1) * octaves[o].height;
		}
		else
		{
			float perl = snoise(float2((x * octaves[o].scale.x + time * octaves[o].speed.x) / dimension, (z * octaves[o].scale.y + time * octaves[o].speed.y * boatSpeed) / dimension));
			y += perl * octaves[o].height;
		}
	}
	vertices[index] = float3(x, y, z);
}

RWStructuredBuffer<uint3> triangles;
RWStructuredBuffer<float3> normals;

float3 CalculateSurfaceNormal(float3 vertA, float3 vertB, float3 vertC)
{
	float3 aToB = vertB - vertA;
	float3 bToC = vertC - vertB;
	return normalize(cross(aToB, bToC));
}

[numthreads(2, 1, 1)]
void CSCalcNormals(uint3 id : SV_DispatchThreadID)
{
	float3 vertA = vertices[triangles[id.x].x];
	float3 vertB = vertices[triangles[id.x].y];
	float3 vertC = vertices[triangles[id.x].z];
	float3 normal = CalculateSurfaceNormal(vertA, vertB, vertC);

	normals[triangles[id.x].x] += normal;
	normals[triangles[id.x].y] += normal;
	normals[triangles[id.x].z] += normal;
}

[numthreads(8, 8, 1)]
void CSNormalizeNormals(uint3 id : SV_DispatchThreadID)
{
	int index = id.x + id.y * 8;
	normals[index] = normalize(normals[index]);
}